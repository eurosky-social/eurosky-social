apiVersion: v1
kind: Secret
metadata:
  name: pds-secrets
  namespace: ${namespace}
  labels:
    app: pds
    app.kubernetes.io/name: pds
    app.kubernetes.io/component: server
type: Opaque
stringData:
  PDS_JWT_SECRET: "${pds_jwt_secret}"
  PDS_ADMIN_PASSWORD: "${pds_admin_password}"
  PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX: "${pds_plc_rotation_key}"
  PDS_BLOBSTORE_S3_ACCESS_KEY_ID: "${pds_blobstore_access_key}"
  PDS_BLOBSTORE_S3_SECRET_ACCESS_KEY: "${pds_blobstore_secret_key}"

# TODO: Add PDS_DPOP_SECRET (OAuth DPoP protection, openssl rand -hex 32)
# TODO: Add PDS_REPO_SIGNING_KEY_K256_PRIVATE_KEY_HEX (repo signing, 64-char hex)
# TODO: Add PDS_RECOVERY_DID_KEY (identity recovery, did:key format)
# TODO: Verify JWT_SECRET is 32-char high-entropy string (not openssl rand -hex 32 which gives 64 chars)
# TODO: Verify ADMIN_PASSWORD is from openssl rand -hex 16 (32 chars output, 16 bytes)
# TODO: Verify PLC_ROTATION_KEY is 64-char hex (256-bit)
# TODO: Consider using helm-secrets or external-secrets for enhanced secret management
# TODO: Optional: Add PDS_HCAPTCHA_SECRET_KEY if enabling hCaptcha
# TODO: Optional: Add PDS_HCAPTCHA_TOKEN_SALT if enabling hCaptcha
# TODO: Optional: Add PDS_ENTRYWAY_ADMIN_TOKEN if using entryway mode
# TODO: Optional: Add PDS_RATE_LIMIT_BYPASS_KEY for rate limit bypass
# TODO: Optional: Add PDS_REDIS_SCRATCH_PASSWORD if using Redis
